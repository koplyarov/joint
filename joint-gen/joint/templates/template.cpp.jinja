{% macro open_ns(package) -%}
{%- for n in package.name_list %}
namespace {{n}} {
{%- endfor %}
{%- endmacro -%}

{% macro close_ns(package) -%}
{% for n in package.name_list -%} } {%- endfor %}
{%- endmacro -%}

{% macro for_each_package() -%}
{% for p in packages -%}
{{ open_ns(p) }}{{ caller(p) }}{{ close_ns(p) }}
{% endfor -%}
{%- endmacro -%}

{% macro method_names_var(interface) -%}
{% if interface.methods -%}
const char* method_names[] = { {% for m in interface.methods %}"{{interface.fullname}}.{{m.name}} of a C++ component "{{', ' if not loop.last}}{% endfor %} };
{%- endif -%}
{%- endmacro -%}


#pragma once

#include <joint.cpp/detail/GeneratedCodePrologue.hpp>

{% call(p) for_each_package() %}
{% for e in p.enums %}
    class {{e.name}}
    {
    public:
        enum _Value
        {
        {%- for v in e.values %}
            {{v.name}} = {{v.value}}{{"," if not loop.last}}
        {%- endfor %}
        };

        DETAIL_JOINT_CPP_ENUM_CLASS_INTERNALS({{e.name}}, {{"_Value::" + e.values[0].name if e.values else "_Value()"}})
    };
{% endfor %}
{% endcall -%}


{% call(p) for_each_package() %}
{% for i in p.interfaces %}
    class {{i.name}};
    typedef ::joint::Ptr<{{i.name}}> {{i.name}}_Ptr;
    typedef ::joint::Ref<{{i.name}}> {{i.name}}_Ref;
    template <typename ComponentImpl_> class {{i.name}}_accessor;
{% endfor %}
{% endcall -%}


{% call(p) for_each_package() %}
{% for s in p.structs %}
    struct {{s.name}}
    {
        {%- for m in s.members %}
        {{ cpp_type(m.type).cpp_type }} {{m.name}};
        {%- endfor %}

        {{s.name}}() { }
        {% if s.members %}
#if DETAIL_JOINT_CPP_MOVE_SUPPORTED
        {{s.name}}(
            {%- for m in s.members -%}
            {{ cpp_type(m.type).cpp_type }} {{m.name}} {{-", " if not loop.last}}
            {%- endfor -%}
        )
            : {% for m in s.members -%}
            {{m.name}}(std::move({{m.name}})){{", " if not loop.last}}
            {%- endfor %}
        { }
#else
        {{s.name}}(
            {%- for m in s.members -%}
            {{ cpp_type(m.type).cpp_param_type }} {{m.name}} {{-", " if not loop.last}}
            {%- endfor -%}
        )
            : {% for m in s.members -%}
            {{m.name}}({{m.name}}){{", " if not loop.last}}
            {%- endfor %}
        { }
#endif
        {% endif %}
        ::joint::String ToString() const;

        static {{s.name}} _FromJointMembers(JointCore_Value* members)
        {
            JointCore_Value value;
            value.members = members;
            {{from_joint_retval(s, 'value').initialization | join('\n') | indent(8)}}
            return {{from_joint_retval(s, 'value').code}};
        }

        static const size_t _MembersCount = {{s.members | length}};
        static const size_t _RecursiveMembersCount = _MembersCount
        {%- for m in s.members if type_name(m.type) == 'Struct' -%}
        + {{m.type.name}}::_RecursiveMembersCount
        {%- endfor -%}
        ;

        void _FillMembers(JointCore_Value* members) const
        {
            {% for m in s.members -%}
            members[{{loop.index0}}].{{m.type.variant_name}} =
            {%- if type_name(m.type) == 'BuiltinType' -%}
            {{m.name}}{{'.Utf8Bytes().data()' if m.type.fullname == 'string'}}
            {%- elif type_name(m.type) == 'Enum' -%}
            {{m.name}}._RawValue()
            {%- elif type_name(m.type) == 'Interface' -%}
            {{m.name}}._GetObjectAccessor()
            {%- elif type_name(m.type) == 'Struct' -%}
            members + _MembersCount
            {%- for m in s.members[:loop.index0] if type_name(m.type) == 'Struct' %} + {{mangle_type(m.type)}}::_RecursiveMembersCount {% endfor -%}
            {%- endif -%}
            ;
            {% endfor -%}
            {% for m in s.members -%}
            {% if type_name(m.type) == 'Struct' -%}
            {{m.name}}._FillMembers(members[{{loop.index0}}].members);
            {% endif -%}
            {% endfor -%}
        }

        static JointCore_StructDescriptor* _GetStructDescriptor()
        {
            static JointCore_Type member_types[{{s.members | length}}];
            {% for m in s.members -%}
            member_types[{{loop.index0}}].id = (JointCore_TypeId){{m.type.index}};
            {% if type_name(m.type) == 'Interface' -%}
            member_types[{{loop.index0}}].payload.interfaceChecksum = {{mangle_type(m.type)}}::_GetInterfaceChecksum();
            {% elif type_name(m.type) == 'Struct' -%}
            member_types[{{loop.index0}}].payload.structDescriptor = {{mangle_type(m.type)}}::_GetStructDescriptor();
            {% endif -%}
            {% endfor -%}
            static JointCore_StructDescriptor desc = { {{s.members | length}}, member_types };
            return &desc;
        }
    };

    std::ostream& operator << (std::ostream& s, const {{mangle_type(s)}}& st)
    {
        return s << "{"
        {% for m in s.members -%}
        "{{- '\'' if m.type.fullname == 'string' -}}" << st.{{m.name}}{{- '.Utf8Bytes().data()' if m.type.fullname == 'string' -}} << "{{- '\'' if m.type.fullname == 'string' -}}"
        {% endfor -%}
        " }";
    }

    ::joint::String {{s.name}}::ToString() const
    { std::stringstream s; s << *this; return ::joint::String(s.str()); }

{% endfor %}
{% endcall -%}

{% call(p) for_each_package() %}
{% for i in p.interfaces %}
    class {{i.name}}
    {
    private:
        JointCore_ObjectAccessor _obj;

    public:
        typedef ::joint::TypeList<{{ i.bases | map('mangle_type') | join(', ') }}> BaseInterfaces;
        template <typename ComponentImpl_> using Accessor = {{i.name}}_accessor<ComponentImpl_>;

        {{i.name}}() { _obj.Instance = NULL; _obj.VTable = NULL; }
        {{i.name}}(JointCore_ObjectAccessor obj) : _obj(obj) { }

        JointCore_ObjectAccessor _GetObjectAccessor() const { return _obj; }
        static JointCore_InterfaceChecksum _GetInterfaceChecksum() { return {{hex(i.checksum)}}; }
        static const char* _GetInterfaceId() { return "{{i.fullname}}"; }

        {%- for m in i.methods %}
        JOINT_CPP_RET_TYPE({{cpp_type(m.ret_type).cpp_type}}) {{m.name}}({{ m.params | map('ref_param_decl') | join(', ') }});
        {%- endfor %}
    };

    template <typename ComponentImpl_>
    class {{i.name}}_accessor
    {
    public:
        static JointCore_Error InheritsInterface(JointCore_InterfaceId interfaceId, JointCore_InterfaceChecksum checksum)
        {
            {% for b in [ i ] recursive %}
            {%- if loop.first -%}
            if (strcmp(interfaceId, "{{b.fullname}}") == 0)
                return (checksum == {{hex(b.checksum)}}) ? JOINT_CORE_ERROR_NONE : JOINT_CORE_ERROR_INVALID_INTERFACE_CHECKSUM;
            {% if b.bases -%} {{ loop(b.bases) }} {%- endif -%}
            {%- endif -%}
            {% endfor -%}
            return JOINT_CORE_ERROR_CAST_FAILED;
        }

        static JointCore_Error InvokeMethodImpl(ComponentImpl_* componentImpl, JointCore_SizeT methodId, const JointCore_Parameter* params, JointCore_SizeT paramsCount, JointCore_RetValue* outRetValue);
    };

{% endfor %}
{% endcall -%}


{% call(p) for_each_package() %}
{% for e in p.enums %}
    ::joint::String {{e.name}}::ToString() const
    {
        switch (_value)
        {
        {% for v in e.values -%}
        case {{v.name}}: return ::joint::String("{{v.name}}");
        {% endfor -%}
        default: return ::joint::String("<Unknown {{e.name}} value>");
        }
    }
{% endfor %}
{% endcall -%}


{% call(p) for_each_package() %}
{% for i in p.interfaces %}
{% for m in i.methods %}
    JOINT_CPP_RET_TYPE({{cpp_type(m.ret_type).cpp_type}}) {{i.name}}::{{m.name}}({{m.params | map('ref_param_decl') | join(', ')}})
    {
        using namespace ::joint::detail;
        JointCore_RetValue _ret_val;
        {% if m.ret_type.need_release -%}
        JointCore_Type _ret_val_type;
        _ret_val_type.id = (JointCore_TypeId){{m.ret_type.index}};
        {% if type_name(m.ret_type) == 'Interface' -%}
        _ret_val_type.payload.interfaceChecksum = {{mangle_type(m.ret_type)}}::_GetInterfaceChecksum();
        {% endif -%}
        {% if type_name(m.ret_type) == 'Struct' -%}
        _ret_val_type.payload.structDescriptor = {{mangle_type(m.ret_type)}}::_GetStructDescriptor();
        {% endif -%}
        {% endif -%}
        {% if m.params -%}
        JointCore_Parameter params[{{m.params | length}}];
        {% for p in m.params -%}
        {{to_joint_param(p.type, p.name).initialization | join('\n') | indent(8)}}
        params[{{p.index}}].value.{{p.type.variant_name}} = {{to_joint_param(p.type, p.name).code}};
        {% endfor -%}
        {% endif -%}
        JOINT_METHOD_CALL("C++ proxy for {{i.fullname}}.{{m.name}}", _obj.VTable->InvokeMethod(_obj.Instance, {{m.index}}, {{'params' if m.params else 'nullptr'}}, {{m.params | length}}, &_ret_val));
        {% if m.ret_type.need_release -%}
        ::joint::detail::RetValueGuard _rvg(_ret_val_type, _ret_val);
        {%- endif %}
        {% if m.ret_type.name != 'void' -%}
        {{from_joint_retval(m.ret_type, '_ret_val.result.value').initialization | join('\n') | indent(8)}}
        JOINT_CPP_RETURN({{from_joint_retval(m.ret_type, '_ret_val.result.value').code}});
        {%- else %}
        JOINT_CPP_RETURN_VOID();
        {%- endif %}
    }
{% endfor %}

    template <typename ComponentImpl_>
    JointCore_Error {{i.name}}_accessor<ComponentImpl_>::InvokeMethodImpl(ComponentImpl_* componentImpl, JointCore_SizeT methodId, const JointCore_Parameter* params, JointCore_SizeT paramsCount, JointCore_RetValue* outRetValue)
    {
#if !JOINT_CPP_CONFIG_NO_EXCEPTIONS
        try
#endif
        {
            switch(methodId)
            {
            {% for m in i.methods -%}
            case {{m.index}}:
                {
                    {%- for p in m.params -%}
                    {{from_joint_param(p.type, 'params[{}].value'.format(p.index)).initialization | join('\n') | indent(20)}}
                    {{cpp_type(p.type).joint_ref_type.cpp_type}} p{{p.index}}({{from_joint_param(p.type, 'params[{}].value'.format(p.index)).code}});
                    {%- endfor -%}
                    {%- if m.ret_type.name != 'void' %}
                    DETAIL_JOINT_CPP_INVOKE_METHOD({{cpp_type(m.ret_type).cpp_type}}, (componentImpl->{{m.name}}({%- for p in m.params -%}p{{p.index}}{{', ' if not loop.last}}{%- endfor -%})));
                    {%- else %}
                    DETAIL_JOINT_CPP_INVOKE_VOID_METHOD((componentImpl->{{m.name}}({%- for p in m.params -%}p{{p.index}}{{', ' if not loop.last}}{%- endfor -%})));
                    {%- endif %}
#if JOINT_CPP_CONFIG_NO_EXCEPTIONS
                    if (!result.Ok())
                    {
                        {{ method_names_var(i) }}
                        return ::joint::detail::WrapCppException<ComponentImpl_>(result.Exception(), outRetValue, {{'method_names[methodId]' if i.methods else '""'}});
                    }
#endif
                    {%- if m.ret_type.name != 'void' %}
                    {{to_joint_retval(m.ret_type, 'DETAIL_JOINT_CPP_METHOD_RESULT').initialization | join('\n') | indent(20)}}
                    outRetValue->result.value.{{m.ret_type.variant_name}} = {{to_joint_retval(m.ret_type, 'DETAIL_JOINT_CPP_METHOD_RESULT').code}};
                    {%- endif %}
                }
                break;
            {% endfor -%}
            default:
                return JOINT_CORE_ERROR_GENERIC;
            }
        }
#if !JOINT_CPP_CONFIG_NO_EXCEPTIONS
        catch (::joint::Exception& ex)
        {
            {{ method_names_var(i) }}
            return ::joint::detail::WrapCppException<ComponentImpl_>(ex, outRetValue, {{'method_names[methodId]' if i.methods else '""'}});
        }
        catch (std::exception& ex)
        {
            {{ method_names_var(i) }}
            return ::joint::detail::WrapCppException<ComponentImpl_>(ex, outRetValue, {{'method_names[methodId]' if i.methods else '""'}});
        }
#endif
        outRetValue->releaseValue = &::joint::detail::_ReleaseRetValue;
        return JOINT_CORE_ERROR_NONE;
    }

{% endfor %}
{% endcall -%}

#include <joint.cpp/detail/GeneratedCodeEpilogue.hpp>

